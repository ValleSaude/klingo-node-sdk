{"version":3,"sources":["../../src/api/api.js"],"names":["axios","require","create","KlingoError","validate","requestHandler","responseErrorHandler","Api","interceptors","request","use","url","includes","authenticated","headers","TypeError","undefined","response","error","get","post","put","patch","module","exports"],"mappings":";;;;;;;;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,YAAyBC,MAAzB,EAAd;;AACA,eAAwBD,OAAO,CAAC,uBAAD,CAA/B;AAAA,IAAQE,WAAR,YAAQA,WAAR;;AACA,IAAMC,QAAQ,GAAGH,OAAO,CAAC,aAAD,CAAxB;;AACA,gBAA2BA,OAAO,CAAC,wCAAD,CAAlC;AAAA,IAAQI,cAAR,aAAQA,cAAR;;AACA,gBAEIJ,OAAO,CAAC,0CAAD,CAFX;AAAA,IACEK,oBADF,aACEA,oBADF;;IAKMC,G;AAEJ,iBAAa;AAAA;AACXP,IAAAA,KAAK,CAACQ,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+B,UAACD,OAAD,EAAa;AAC1C,UACE,CAACA,OAAO,CAACE,GAAR,CAAYC,QAAZ,CAAqB,UAArB,CAAD,IACA,CAACH,OAAO,CAACE,GAAR,CAAYC,QAAZ,CAAqB,OAArB,CADD,IAEA,CAACH,OAAO,CAACE,GAAR,CAAYC,QAAZ,CAAqB,MAArB,CAFD,IAGA,CAACR,QAAQ,CAACS,aAAT,CAAuBJ,OAAO,CAACK,OAA/B,CAJH,EAKE;AACA,cAAM,IAAIC,SAAJ,CAAc,0CAAd,CAAN;AACD;;AACD,aAAON,OAAP;AACD,KAVD,EAUGO,SAVH;AAYAhB,IAAAA,KAAK,CAACQ,YAAN,CAAmBS,QAAnB,CAA4BP,GAA5B,CAAgCM,SAAhC,EAA2C,UAACE,KAAD,EAAW;AACpD,UAAI,EAAEA,KAAK,YAAYH,SAAnB,CAAJ,EAAmC;AACjC,cAAM,IAAIZ,WAAJ,CAAgBe,KAAhB,CAAN;AACD;;AACD,YAAMA,KAAN;AACD,KALD;AAMD;;;;WAED,eAAgB;AAAE,aAAOlB,KAAK,CAACmB,GAAN,OAAAnB,KAAK,YAAZ;AAA6B;;;WAC/C,gBAAgB;AAAE,aAAOA,KAAK,CAACoB,IAAN,OAAApB,KAAK,YAAZ;AAA8B;;;WAChD,eAAe;AAAE,aAAOA,KAAK,CAACqB,GAAN,OAAArB,KAAK,YAAZ;AAA6B;;;WAC9C,iBAAiB;AAAE,aAAOA,KAAK,CAACsB,KAAN,OAAAtB,KAAK,YAAZ;AAA+B;;;WAClD,mBAAkB;AAAE,aAAOA,KAAK,UAAL,OAAAA,KAAK,YAAZ;AAAgC;;;;;AAGtDuB,MAAM,CAACC,OAAP,GAAiB;AAAEjB,EAAAA,GAAG,EAAHA;AAAF,CAAjB","sourcesContent":["const axios = require('axios').default.create();\nconst { KlingoError } = require('../error/klingo-error');\nconst validate = require('../validate');\nconst { requestHandler } = require('./interceptors/verify-auth.interceptor');\nconst {\n  responseErrorHandler\n} = require('./interceptors/handler-error.interceptor');\n\n\nclass Api {\n\n  constructor(){\n    axios.interceptors.request.use((request) => {\n      if (\n        !request.url.includes('register') &&\n        !request.url.includes('login') &&\n        !request.url.includes('live') &&\n        !validate.authenticated(request.headers)\n      ) {\n        throw new TypeError('Verifique as configurações da requisição');\n      }\n      return request;\n    }, undefined);\n    \n    axios.interceptors.response.use(undefined, (error) => {\n      if (!(error instanceof TypeError)) {\n        throw new KlingoError(error);\n      }\n      throw error;\n    });\n  }\n\n  get (...params) { return axios.get(...params) };\n  post(...params) { return axios.post(...params) };\n  put(...params) { return axios.put(...params) };\n  patch(...params) { return axios.patch(...params) };\n  delete(...params) { return axios.delete(...params) };\n}\n\nmodule.exports = { Api };\n"],"file":"api.js"}