{"version":3,"sources":["../src/client.js"],"names":["require","External","Schedule","Patient","Checkin","Verify","logger","getBaseUrl","validate","Client","options","client","TypeError","log","info","error","success","debug","config","base","env","headers","Accept","xAppToken","verify","external","patient","schedule","checkin","setXAppToken","token","module","exports"],"mappings":";;;;;;eAAqBA,OAAO,CAAC,sBAAD,C;IAApBC,Q,YAAAA,Q;;gBACaD,OAAO,CAAC,sBAAD,C;IAApBE,Q,aAAAA,Q;;gBACYF,OAAO,CAAC,qBAAD,C;IAAnBG,O,aAAAA,O;;gBACYH,OAAO,CAAC,qBAAD,C;IAAnBI,O,aAAAA,O;;gBACWJ,OAAO,CAAC,oBAAD,C;IAAlBK,M,aAAAA,M;;AACR,IAAMC,MAAM,GAAGN,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAMO,UAAU,GAAGP,OAAO,CAAC,SAAD,CAAP,CAAmBO,UAAtC;;AACA,IAAMC,QAAQ,GAAGR,OAAO,CAAC,YAAD,CAAxB;;IAEMS,M,GACJ,gBAAYC,OAAZ,EAAqB;AAAA;;AACnB,MAAI,CAACF,QAAQ,CAACG,MAAT,CAAgBD,OAAhB,CAAL,EAA+B;AAC7B,UAAM,IAAIE,SAAJ,CACJ,yDADI,CAAN;AAGD;;AAED,MAAIC,GAAG,GAAG;AACRA,IAAAA,GAAG,EAAE,eAAM,CAAG,CADN;AAERC,IAAAA,IAAI,EAAE,gBAAM,CAAG,CAFP;AAGRC,IAAAA,KAAK,EAAE,iBAAM,CAAG,CAHR;AAIRC,IAAAA,OAAO,EAAE,mBAAM,CAAG;AAJV,GAAV;;AAOA,MAAIN,OAAO,CAACO,KAAZ,EAAmB;AACjBJ,IAAAA,GAAG,GAAGP,MAAM,CAACI,OAAO,CAACG,GAAT,EAAcH,OAAO,CAACO,KAAtB,CAAZ;AACD;;AAED,MAAMC,MAAM,GAAG;AACb;AACN;AACMC,IAAAA,IAAI,EAAE;AACJ,iBAASZ,UAAU,CAACG,OAAO,CAACU,GAAT,EAAc,SAAd;AADf,KAHO;AAMbC,IAAAA,OAAO,EAAE;AACP,sCACE,wCAFK;AAGP,sCAAgC,GAHzB;AAIP,qCAA+B,GAJxB;AAKPC,MAAAA,MAAM,EAAE,kBALD;AAMP,sBAAgB,kBANT;AAOP,qBAAeZ,OAAO,CAACa;AAPhB;AAST;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAxCmB,GAAf;AA2CA,OAAKC,MAAL,GAAc,IAAInB,MAAJ,CAAW,IAAX,EAAiBa,MAAjB,CAAd;AACA,OAAKO,QAAL,GAAgB,IAAIxB,QAAJ,CAAa,IAAb,EAAmBiB,MAAnB,CAAhB;AACA,OAAKQ,OAAL,GAAe,IAAIvB,OAAJ,CAAY,IAAZ,EAAkBe,MAAlB,CAAf;AACA,OAAKS,QAAL,GAAgB,IAAIzB,QAAJ,CAAa,IAAb,EAAmBgB,MAAnB,CAAhB;AACA,OAAKU,OAAL,GAAe,IAAIxB,OAAJ,CAAY,IAAZ,EAAkBc,MAAlB,CAAf;;AAEA,OAAKW,YAAL,GAAoB,UAACC,KAAD,EAAW;AAC7BZ,IAAAA,MAAM,CAACG,OAAP,CAAe,aAAf,IAAgCS,KAAhC;AACD,GAFD;AAGD,C;;AAGHC,MAAM,CAACC,OAAP,GAAiB;AAAEvB,EAAAA,MAAM,EAANA;AAAF,CAAjB","sourcesContent":["const { External } = require('./resources/external');\nconst { Schedule } = require('./resources/schedule');\nconst { Patient } = require('./resources/patient');\nconst { Checkin } = require('./resources/checkin');\nconst { Verify } = require('./resources/verify');\nconst logger = require('./logger');\nconst getBaseUrl = require('./utils').getBaseUrl;\nconst validate = require('./validate');\n\nclass Client {\n  constructor(options) {\n    if (!validate.client(options)) {\n      throw new TypeError(\n        'Erro ao conectar com klingo! Verifique as configurações'\n      );\n    }\n\n    let log = {\n      log: () => { },\n      info: () => { },\n      error: () => { },\n      success: () => { }\n    };\n\n    if (options.debug) {\n      log = logger(options.log, options.debug);\n    }\n\n    const config = {\n      /*       logger: log,\n            env: options.env, */\n      base: {\n        default: getBaseUrl(options.env, 'default')\n      },\n      headers: {\n        'Access-Control-Allow-Methods':\n          'POST, GET, PATCH, PUT, DELETE, OPTIONS',\n        'Access-Control-Allow-Headers': '*',\n        'Access-Control-Allow-Origin': '*',\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        'X-APP-TOKEN': options.xAppToken\n      }\n      /*       transform: (body, response, resolveWithFullResponse) => {\n              let status = response.statusCode <= 200 ? \"success\" : \"error\";\n      \n              if (response.statusCode <= 200) {\n                log.info({\n                  statusCode: response.statusCode,\n                  statusMessage: response.statusMessage,\n                  status,\n                  content: body\n                });\n              } else {\n                content = content.errors.error;\n                log.error({\n                  statusCode: response.statusCode,\n                  statusMessage: response.statusMessage,\n                  status,\n                  content: body\n                });\n              }\n      \n              return {\n                statusCode: response.statusCode,\n                status,\n                content: body\n              };\n            } */\n    };\n\n    this.verify = new Verify(this, config);\n    this.external = new External(this, config);\n    this.patient = new Patient(this, config);\n    this.schedule = new Schedule(this, config);\n    this.checkin = new Checkin(this, config);\n\n    this.setXAppToken = (token) => {\n      config.headers['X-APP-TOKEN'] = token;\n    };\n  }\n}\n\nmodule.exports = { Client };\n"],"file":"client.js"}